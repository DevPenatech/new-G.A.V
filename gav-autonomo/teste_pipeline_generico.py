# gav-autonomo/teste_pipeline_generico.py
# Testa pipeline 100% prompt-driven (sem regras hardcoded)

import requests
import json

BASE_URL = "http://localhost:8000"

def teste_llm_selector_deteccao():
    """Testa se LLM Selector detecta corretamente contexto vs busca nova"""
    
    print("üß† TESTE: Detec√ß√£o do LLM Selector")
    print("=" * 40)
    
    cenarios = [
        {
            "tipo": "busca_nova",
            "mensagem": "quero nescau",
            "endpoint_esperado": "/produtos/busca"
        },
        {
            "tipo": "contexto_anterior", 
            "mensagem": "quero o 1",
            "endpoint_esperado": "/chat/contexto"
        },
        {
            "tipo": "contexto_anterior",
            "mensagem": "id 18136", 
            "endpoint_esperado": "/chat/contexto"
        },
        {
            "tipo": "contexto_anterior",
            "mensagem": "ver mais op√ß√µes",
            "endpoint_esperado": "/chat/contexto"
        },
        {
            "tipo": "carrinho",
            "mensagem": "ver meu carrinho",
            "endpoint_esperado": "/carrinhos/"
        },
        {
            "tipo": "conversa",
            "mensagem": "obrigado",
            "endpoint_esperado": "/chat/resposta"
        }
    ]
    
    sucessos = 0
    total = len(cenarios)
    
    print("üìã Cen√°rios de teste:")
    for i, cenario in enumerate(cenarios, 1):
        print(f"   {i}. {cenario['tipo']}: '{cenario['mensagem']}'")
    
    print("\nüß™ Executando testes...")
    
    for i, cenario in enumerate(cenarios, 1):
        print(f"\n{i}. Testando: '{cenario['mensagem']}'")
        
        try:
            response = requests.post(f"{BASE_URL}/chat", json={
                "texto": cenario["mensagem"],
                "sessao_id": f"test_detector_{i}"
            }, timeout=30)
            
            if response.status_code == 200:
                resultado = response.json()
                
                # Para validar, vemos se a resposta faz sentido para o tipo
                if cenario["tipo"] == "busca_nova":
                    # Deve buscar produtos
                    if "encontrei" in resultado.get("mensagem", "").lower() or "resultados" in resultado:
                        print("‚úÖ Busca nova detectada corretamente")
                        sucessos += 1
                    else:
                        print("‚ùå Busca nova N√ÉO detectada")
                        
                elif cenario["tipo"] == "contexto_anterior":
                    # Deve tentar processar contexto (pode dar erro por n√£o ter contexto)
                    mensagem = resultado.get("mensagem", "").lower()
                    if "erro" in resultado or "n√£o consegui" in mensagem or "contexto" in mensagem:
                        print("‚úÖ Contexto anterior detectado (sem contexto dispon√≠vel √© OK)")
                        sucessos += 1
                    else:
                        print("‚ùå Contexto anterior N√ÉO detectado")
                        
                elif cenario["tipo"] == "carrinho":
                    # Deve processar carrinho
                    if "carrinho" in resultado.get("mensagem", "").lower():
                        print("‚úÖ Carrinho detectado corretamente")
                        sucessos += 1
                    else:
                        print("‚ùå Carrinho N√ÉO detectado")
                        
                elif cenario["tipo"] == "conversa":
                    # Deve responder conversacionalmente
                    if resultado.get("tipo") == "conversacional" or len(resultado.get("mensagem", "")) > 10:
                        print("‚úÖ Conversa detectada corretamente")
                        sucessos += 1
                    else:
                        print("‚ùå Conversa N√ÉO detectada")
                
                # Debug da resposta
                print(f"   üìù Resposta: {json.dumps(resultado, ensure_ascii=False)[:100]}...")
                
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
    
    print(f"\nüìä Resultado: {sucessos}/{total} detec√ß√µes corretas ({sucessos/total*100:.1f}%)")
    
    if sucessos >= total * 0.8:
        print("‚úÖ LLM Selector funcionando bem!")
        return True
    else:
        print("‚ùå LLM Selector precisa de ajustes")
        return False

def teste_pipeline_generico():
    """Testa se o pipeline gen√©rico funciona para diferentes dom√≠nios"""
    
    print("\nüîÑ TESTE: Pipeline Gen√©rico")
    print("=" * 35)
    
    # Testa diferentes tipos de intera√ß√£o
    interacoes = [
        ("Busca de produto", "quero caf√©"),
        ("Opera√ß√£o carrinho", "ver carrinho"),  
        ("Conversa casual", "oi, tudo bem?"),
        ("Agradecimento", "muito obrigado!")
    ]
    
    sucessos = 0
    
    for tipo, mensagem in interacoes:
        print(f"\nüß™ {tipo}: '{mensagem}'")
        
        try:
            response = requests.post(f"{BASE_URL}/chat", json={
                "texto": mensagem,
                "sessao_id": "test_pipeline_generico"
            })
            
            if response.status_code == 200:
                resultado = response.json()
                
                # Verifica se tem resposta conversacional
                if "mensagem" in resultado and len(resultado["mensagem"]) > 5:
                    print(f"‚úÖ Pipeline funcionou: {resultado['mensagem'][:50]}...")
                    sucessos += 1
                else:
                    print("‚ùå Pipeline n√£o gerou resposta conversacional")
                    print(f"   üìù Resposta: {json.dumps(resultado, indent=2)[:150]}...")
            else:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
    
    print(f"\nüìä Pipeline: {sucessos}/{len(interacoes)} funcionando ({sucessos/len(interacoes)*100:.1f}%)")
    
    return sucessos >= len(interacoes) * 0.75

def teste_prompts_contexto():
    """Testa se os prompts de contexto foram criados corretamente"""
    
    print("\nüéØ TESTE: Prompts de Contexto")
    print("=" * 32)
    
    prompts_necessarios = [
        "prompt_processador_contexto",
        "prompt_executor_referencia"
    ]
    
    sucessos = 0
    
    for prompt_nome in prompts_necessarios:
        print(f"\nüîç Verificando: {prompt_nome}")
        
        try:
            response = requests.get(f"http://localhost:8001/admin/prompts/buscar", params={
                "nome": prompt_nome,
                "espaco": "autonomo",
                "versao": "1"
            })
            
            if response.status_code == 200:
                prompt_data = response.json()
                
                if prompt_data.get("template") and len(prompt_data["template"]) > 100:
                    print("‚úÖ Prompt existe e tem conte√∫do")
                    sucessos += 1
                else:
                    print("‚ùå Prompt vazio ou muito pequeno")
            else:
                print(f"‚ùå Prompt n√£o encontrado: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar prompt: {e}")
    
    print(f"\nüìä Prompts: {sucessos}/{len(prompts_necessarios)} criados ({sucessos/len(prompts_necessarios)*100:.1f}%)")
    
    return sucessos == len(prompts_necessarios)

def teste_arquitetura_generica():
    """Testa se a arquitetura √© realmente gen√©rica (n√£o espec√≠fica de produtos)"""
    
    print("\nüèóÔ∏è TESTE: Arquitetura Gen√©rica")
    print("=" * 35)
    
    # Simula diferentes dom√≠nios
    dominios = [
        ("Vendas", "quero um produto"),
        ("Suporte", "preciso de ajuda"),
        ("Agendamento", "quero marcar uma consulta"),
        ("Informa√ß√µes", "qual o hor√°rio de funcionamento?")
    ]
    
    generico = True
    
    for dominio, mensagem in dominios:
        print(f"\nüåê Simulando {dominio}: '{mensagem}'")
        
        try:
            response = requests.post(f"{BASE_URL}/chat", json={
                "texto": mensagem,
                "sessao_id": f"test_{dominio.lower()}"
            })
            
            if response.status_code == 200:
                resultado = response.json()
                
                # Verifica se o sistema responde genericamente (n√£o quebra)
                if "mensagem" in resultado or "erro" in resultado:
                    print(f"‚úÖ Sistema gen√©rico respondeu: {str(resultado)[:50]}...")
                else:
                    print("‚ùå Sistema n√£o √© gen√©rico (quebrou com dom√≠nio diferente)")
                    generico = False
            else:
                print(f"‚ö†Ô∏è Sistema retornou erro: {response.status_code}")
                # Erro pode ser OK, desde que seja tratado genericamente
                
        except Exception as e:
            print(f"‚ùå Sistema quebrou com dom√≠nio diferente: {e}")
            generico = False
    
    if generico:
        print("\n‚úÖ ARQUITETURA √â GEN√âRICA: Funciona para qualquer dom√≠nio!")
        print("üöÄ Pronto para: vendas, telemarking, suporte, agendamento, etc.")
    else:
        print("\n‚ùå ARQUITETURA N√ÉO √â GEN√âRICA: Acoplada a produtos")
        
    return generico

def executar_suite_correcao():
    """Executa todos os testes da solu√ß√£o corrigida"""
    
    print("üéØ SUITE DE TESTES: Solu√ß√£o 100% Prompt-Driven")
    print("=" * 60)
    
    resultados = {
        "deteccao_llm": teste_llm_selector_deteccao(),
        "pipeline_generico": teste_pipeline_generico(), 
        "prompts_contexto": teste_prompts_contexto(),
        "arquitetura_generica": teste_arquitetura_generica()
    }
    
    # Relat√≥rio final
    print("\n" + "=" * 60)
    print("üìä RELAT√ìRIO FINAL - CORRE√á√ÉO IMPLEMENTADA")
    print("=" * 60)
    
    sucessos = sum(resultados.values())
    total = len(resultados)
    
    print(f"‚úÖ Detec√ß√£o LLM: {'PASSOU' if resultados['deteccao_llm'] else 'FALHOU'}")
    print(f"‚úÖ Pipeline Gen√©rico: {'PASSOU' if resultados['pipeline_generico'] else 'FALHOU'}")
    print(f"‚úÖ Prompts de Contexto: {'PASSOU' if resultados['prompts_contexto'] else 'FALHOU'}")
    print(f"‚úÖ Arquitetura Gen√©rica: {'PASSOU' if resultados['arquitetura_generica'] else 'FALHOU'}")
    
    print(f"\nüéØ RESULTADO GERAL: {sucessos}/{total} ({sucessos/total*100:.1f}%)")
    
    if sucessos == total:
        print("\nüéâ PERFEITO! Solu√ß√£o 100% Prompt-Driven implementada!")
        print("üöÄ Sistema gen√©rico para qualquer dom√≠nio")
        print("‚úÖ Zero regras hardcoded mantido")
        print("üß† Arquitetura evolutiva via prompt")
        
    elif sucessos >= total * 0.75:
        print("\n‚úÖ MUITO BOM! Corre√ß√£o principal implementada")
        print("üîß Pequenos ajustes nos prompts podem melhorar")
        
    else:
        print("\nüîß PRECISA AJUSTES: Verificar prompts e implementa√ß√£o")
        print("üí° Lembrar: TUDO via prompt, zero regras hardcoded")
    
    return sucessos / total

if __name__ == "__main__":
    executar_suite_correcao()